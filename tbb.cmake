include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../3rdLibs/tbb/tbb44_20150728oss_src/tbb44_20150728oss/include)

if(WIN32)
    set(TBB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../3rdLibs/tbb/bin)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        if(MSVC14)		
            add_definitions(-DOCV_SUPPORT_INTEL_TBB)
            if(CMAKE_BUILD_TYPE MATCHES Release)
                target_link_libraries(${PROJECT_NAME} ${TBB_PATH}/vc2015_x86_amd64/release/tbb.lib)
                target_link_libraries(${PROJECT_NAME} ${TBB_PATH}/vc2015_x86_amd64/release/tbbmalloc.lib)
                target_link_libraries(${PROJECT_NAME} ${TBB_PATH}/vc2015_x86_amd64/release/tbbmalloc_proxy.lib)
            endif(CMAKE_BUILD_TYPE MATCHES Release)
            if (CMAKE_BUILD_TYPE MATCHES Debug)
                target_link_libraries(${PROJECT_NAME} ${TBB_PATH}/vc2015_x86_amd64/release/tbb_debug.lib)
                target_link_libraries(${PROJECT_NAME} ${TBB_PATH}/vc2015_x86_amd64/release/tbbmalloc_debug.lib)
                target_link_libraries(${PROJECT_NAME} ${TBB_PATH}/vc2015_x86_amd64/release/tbbmalloc_proxy_debug.lib)
            endif(CMAKE_BUILD_TYPE MATCHES Debug)
        else(MSVC14)
            message(FATAL_ERROR "only support msvc14")
        endif(MSVC14)
	else(CMAKE_SIZEOF_VOID_P EQUAL 8)
	        message(FATAL_ERROR "only support 64bits")
	endif(CMAKE_SIZEOF_VOID_P EQUAL 8)
else(WIN32)
    message(FATAL_ERROR "do not support non windows platform yet")		
endif(WIN32)
